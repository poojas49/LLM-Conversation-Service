package com.example.services

import scalapb.GeneratedMessage
import java.util.Base64
import scala.util.Try
import org.slf4j.LoggerFactory

class ProtobufService {
  private val logger = LoggerFactory.getLogger(getClass)

  def decodeFromBase64[T <: GeneratedMessage](base64String: String)(implicit companion: scalapb.GeneratedMessageCompanion[T]): Try[T] = {
    logger.info("Starting base64 decoding operation")
    logger.debug(s"Attempting to decode base64 string of length: ${base64String.length}")
    logger.trace(s"Decoding input string starting with: ${base64String.take(20)}...")

    Try {
      logger.debug("Initializing Base64 decoder")
      val bytes = Base64.getDecoder.decode(base64String)
      logger.debug(s"Successfully decoded ${bytes.length} bytes from base64")
      logger.trace(s"First few bytes: ${bytes.take(5).mkString(", ")}")

      logger.debug(s"Parsing bytes using companion class: ${companion.getClass.getSimpleName}")
      val result = companion.parseFrom(bytes)
      logger.info("Successfully completed base64 decoding and protobuf parsing")
      logger.trace(s"Parsed message type: ${result.getClass.getSimpleName}")

      result
    }.recoverWith { case error =>
      logger.error(s"Failed to decode base64 string or parse protobuf message", error)
      logger.warn(s"Decoding failed for input of length ${base64String.length}")
      logger.debug(s"Error details: ${error.getMessage}")
      Try(throw error)
    }
  }

  def encodeToBase64(message: GeneratedMessage): Try[String] = {
    logger.info("Starting protobuf encoding operation")
    logger.debug(s"Encoding message of type: ${message.getClass.getSimpleName}")

    Try {
      logger.debug("Converting protobuf message to byte array")
      val bytes = message.toByteArray
      logger.trace(s"Generated byte array of length: ${bytes.length}")
      logger.trace(s"First few bytes: ${bytes.take(5).mkString(", ")}")

      logger.debug("Initializing Base64 encoder")
      val encodedString = Base64.getEncoder.encodeToString(bytes)
      logger.debug(s"Successfully encoded to base64 string of length: ${encodedString.length}")
      logger.trace(s"Encoded string starts with: ${encodedString.take(20)}...")

      logger.info("Successfully completed protobuf encoding to base64")
      encodedString
    }.recoverWith { case error =>
      logger.error("Failed to encode protobuf message to base64", error)
      logger.warn(s"Encoding failed for message type: ${message.getClass.getSimpleName}")
      logger.debug(s"Error details: ${error.getMessage}")
      Try(throw error)
    }
  }
}